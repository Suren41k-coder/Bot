import telebot
from telebot import types
import random
import uuid
from datetime import datetime, timedelta
import time

API_TOKEN = '7361993582:AAFTk5xdf9M74PuWCeNrOhPw7n8cXbyGEJY'
bot = telebot.TeleBot(API_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
users_data = {}

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    current_time = datetime.now()

    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return
    
    if 'referrals' not in users_data[user_id]:
        users_data[user_id]['referrals'] = []
    if 'used_referrals' not in users_data[user_id]:
        users_data[user_id]['used_referrals'] = []
    if 'last_referral_time' not in users_data[user_id]:
        users_data[user_id]['last_referral_time'] = None

    last_referral_time = users_data[user_id]['last_referral_time']

    if last_referral_time is not None and current_time - last_referral_time < timedelta(days=1):
        remaining_time = timedelta(days=1) - (current_time - last_referral_time)
        bot.send_message(message.chat.id, f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ {remaining_time}.")
        return
    
    referral_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ ID
    referral_link = f"https://t.me/{bot.get_me().username}?start={referral_id}"
    
    users_data[user_id]['referrals'].append(referral_id)
    users_data[user_id]['last_referral_time'] = current_time
    
    bot.send_message(message.chat.id, f"üôã –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏:\n{referral_link}\n\n–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 15,000 —Ä—É–¥—ã! üíé")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    args = message.text.split()

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    if user_id not in users_data:
        users_data[user_id] = {
            'username': username,
            'mine_count': 100,  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–¥—ã
            'items': [],
            'referrals': [],
            'used_referrals': [],
            'last_referral_time': None
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    if len(args) > 1:
        referral_id = args[1]
        for referrer_id, referrer_data in users_data.items():
            if referral_id in referrer_data.get('referrals', []) and referral_id not in referrer_data.get('used_referrals', []):
                referrer_data['mine_count'] += 15000  # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                referrer_data['used_referrals'].append(referral_id)
                bot.send_message(referrer_id, f"üéâ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 15,000 —Ä—É–¥—ã! üíé")
                break

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç —è VRTüëã\n–Ø –∏–≥—Ä–æ–≤–æ–π –±–æ—ÇüïπÔ∏è\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ‚öíÔ∏è\ntelegra.ph/INSTRUKCIYA-PO-ISPOLZOVANIYU---VRT-08-12\n\nüìë–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª - @VRT_dev",)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    username = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(
        message.chat.id, 
        f"‚ÑπÔ∏è {username}, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ –±–æ—Ç–µ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—Éüëá\n"
        f"t.me/ManagerBCS\n\n"
        f"üß© –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π –∫–æ–º–∞–Ω–¥—ã\n\n"
        f"üòî –ï—Å–ª–∏ –±–æ—Ç —Å–Ω–æ–≤–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –±–æ—Ç –≤ –æ—Ç–∫–ª—é—á–∫–µ\n\n"
        f"P.s –∫–æ–º–∞–Ω–¥–∞ VRT –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —á–µ–º-—Ç–æ –ø–æ–º–æ–≥–ª–∏ –≤–∞–º‚ò∫Ô∏è\n\nüìë–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª - @VRT_dev"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–®–ê–•–¢–ê"
@bot.message_handler(func=lambda message: message.text == '–®–∞—Ö—Ç–∞')
def send_mine_info(message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {'username': message.from_user.username, 'mine_count': 0, 'items': []}
    
    user_info = users_data[user_id]
    bot.send_message(message.chat.id, f"‚öíÔ∏è @{user_info['username']} —ç—Ç–æ —Ç–≤–æ—è —à–∞—Ö—Ç–∞\n\n‚ùì–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å —Ä—É–¥—É –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /dig_mine\n\n‚ôªÔ∏è–í—Å–µ–≥–æ —Å–∫–æ–ø–∞–Ω–æ —Ä—É–¥—ã - {user_info['mine_count']}")

# –ö–æ–º–∞–Ω–¥–∞ /dig_mine
@bot.message_handler(commands=['dig_mine'])
def dig_mine(message):
    user_id = message.from_user.id
    if user_id in users_data:
        mined_amount = random.randint(1, 100)
        users_data[user_id]['mine_count'] += mined_amount
        mine_count = users_data[user_id]['mine_count']
        bot.send_message(message.chat.id, f"‚öíÔ∏è–í—ã –≤—Å–∫–æ–ø–∞–ª–∏ {mined_amount}/100 —Ä—É–¥—ã\n‚ôªÔ∏è–í—Å–µ–≥–æ —Å–∫–æ–ø–∞–Ω–æ —Ä—É–¥—ã - {mine_count}")
    else:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö–ï–ô–°–´"
@bot.message_handler(func=lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å')
def open_case(message):
    user_id = message.from_user.id

    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    current_time = datetime.now()
    last_case_time = users_data[user_id].get('last_case_time')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    if last_case_time and current_time - last_case_time < timedelta(minutes=1):
        remaining_time = timedelta(minutes=1) - (current_time - last_case_time)
        bot.send_message(message.chat.id, f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–µ–π—Å —á–µ—Ä–µ–∑ {remaining_time.seconds} —Å–µ–∫—É–Ω–¥.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    users_data[user_id]['last_case_time'] = current_time

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω–æ–π —Ä—É–¥—ã
    received_ore = random.randint(2, 200)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ 2 —Ä–∞–∑–∞
    users_data[user_id]['mine_count'] += received_ore
    mine_count = users_data[user_id]['mine_count']

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    bot.send_message(message.chat.id, f"üì¶ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ {received_ore} —Ä—É–¥—ã! üíé\n‚ôªÔ∏è –í—Å–µ–≥–æ —Å–∫–æ–ø–∞–Ω–æ —Ä—É–¥—ã - {mine_count}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–†–û–§–ò–õ–¨"
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
def view_profile(message):
    user_id = message.from_user.id

    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    user_info = users_data[user_id]
    items_list = '\n'.join(user_info['items']) if user_info['items'] else '–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤'

    bot.send_message(message.chat.id, f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user_info['username']}:\n\nüíé –í—Å–µ–≥–æ —Å–∫–æ–ø–∞–Ω–æ —Ä—É–¥—ã: {user_info['mine_count']}\nüõçÔ∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{items_list}")

# –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
shop_items = {
    'üöó –ú–∞—à–∏–Ω–∞': 5000,
    'üè° –î–æ–º': 20000,
    'üõ≥Ô∏è –Ø—Ö—Ç–∞': 10000,
    '‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç': 30000,
    'üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª': 8000
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–ê–ì–ê–ó–ò–ù"
@bot.message_handler(func=lambda message: message.text == '–ú–∞–≥–∞–∑–∏–Ω')
def open_shop(message):
    markup = types.InlineKeyboardMarkup()
    for item, price in shop_items.items():
        markup.add(types.InlineKeyboardButton(text=f"{item} - {price} —Ä—É–¥—ã", callback_data=item))
    bot.send_message(message.chat.id, "üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data in shop_items)
def handle_purchase(call):
    user_id = call.from_user.id
    item = call.data
    price = shop_items[item]

    if user_id in users_data:
        user_info = users_data[user_id]
        if user_info['mine_count'] >= price:
            user_info['mine_count'] -= price
            user_info['items'].append(item)
            bot.send_message(call.message.chat.id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item}!\nüíé –û—Å—Ç–∞—Ç–æ–∫ —Ä—É–¥—ã: {user_info['mine_count']}")
        else:
            bot.send_message(call.message.chat.id, "üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
    else:
        bot.send_message(call.message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–û–ò"
@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –±–æ–π')
def start_fight(message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {'username': message.from_user.username, 'mine_count': 0, 'items': []}

    # –ê—Ç–∞–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É
    success = random.choice([True, False])
    if success:
        mined_amount = random.randint(1, 100)
        users_data[user_id]['mine_count'] += mined_amount
        bot.send_message(message.chat.id, f"üó°Ô∏è –í—ã –ø–æ–ø–∞–ª–∏! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {mined_amount} —Ä—É–¥—ã.\n‚ôªÔ∏è –í—Å–µ–≥–æ —Å–∫–æ–ø–∞–Ω–æ —Ä—É–¥—ã: {users_data[user_id]['mine_count']}")
    else:
        lost_amount = random.randint(1, 100)
        users_data[user_id]['mine_count'] -= lost_amount
        if users_data[user_id]['mine_count'] < 0:
            users_data[user_id]['mine_count'] = 0
        bot.send_message(message.chat.id, f"üõ°Ô∏è –í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {lost_amount} —Ä—É–¥—ã.\n‚ôªÔ∏è –í—Å–µ–≥–æ —Å–∫–æ–ø–∞–Ω–æ —Ä—É–¥—ã: {users_data[user_id]['mine_count']}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö–ê–ó–ò–ù–û"
@bot.message_handler(func=lambda message: message.text == '–ö–∞–∑–∏–Ω–æ')
def start_casino(message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {'username': message.from_user.username, 'mine_count': 0, 'items': []}

    if users_data[user_id]['mine_count'] < 250:
        bot.send_message(message.chat.id, "‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–¥—ã –¥–ª—è —Å—Ç–∞–≤–∫–∏. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 250 —Ä—É–¥—ã.")
    else:
        users_data[user_id]['mine_count'] -= 250
        outcome = random.choice(['win', 'lose'])
        if outcome == 'win':
            prize = random.randint(1, 1000)
            users_data[user_id]['mine_count'] += prize
            bot.send_message(message.chat.id, f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize} —Ä—É–¥—ã!\n‚ôªÔ∏è–í—Å–µ–≥–æ —Ä—É–¥—ã - {users_data[user_id]['mine_count']}")
        else:
            bot.send_message(message.chat.id, f"üòû–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ú–∏–Ω—É—Å 250 —Ä—É–¥—ã.\n‚ôªÔ∏è–í—Å–µ–≥–æ —Ä—É–¥—ã - {users_data[user_id]['mine_count']}")
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üîÆ–®–ê–† –°–£–î–¨–ë–´üîÆ"
@bot.message_handler(func=lambda message: message.text == '–®–∞—Ä —Å—É–¥—å–±—ã')
def ask_fate_ball_step1(message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {'username': message.from_user.username, 'mine_count': 0, 'items': []}
    
    msg = bot.send_message(message.chat.id, "üîÆ –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å?")
    bot.register_next_step_handler(msg, ask_fate_ball_step2)

def ask_fate_ball_step2(message):
    question = message.text
    chance = random.randint(0, 100)
    bot.send_message(message.chat.id, f"üîÆ –®–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ '{question}' —Ä–∞–≤–µ–Ω {chance}%.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üÄÑ–í–ò–ö–¢–û–†–ò–ù–êüÄÑ"
@bot.message_handler(func=lambda message: message.text == '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')
def quiz_handler(message):
    bot.send_message(message.chat.id, "üÄÑ –£–≥–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ—Ä–æ–±–∫—É!\n–ù–∞—à—ë–ª ‚Äî –ø–æ–ª—É—á–∞–µ—à—å 10,000 —Ä—É–¥—ã üíé\n–ù–µ –Ω–∞—à—ë–ª ‚Äî –º–∏–Ω—É—Å 1,000 —Ä—É–¥—ã üíé\n–í—Å–µ–≥–æ —Ç—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏!")
    
    markup = types.InlineKeyboardMarkup()
    buttons = []
    
    for i in range(40):
        button = types.InlineKeyboardButton("üì¶", callback_data=f"box_{i+1}")
        buttons.append(button)
        
        if len(buttons) % 5 == 0:
            markup.row(*buttons)
            buttons = []
    
    if buttons:
        markup.row(*buttons)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ—Ä–æ–±–æ–∫:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–æ–±–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('box_'))
def box_callback(call):
    user_id = call.from_user.id
    correct_box = random.randint(1, 40)
    selected_box = int(call.data.split('_')[1])
    
    if user_id not in users_data:
        bot.answer_callback_query(call.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    if selected_box == correct_box:
        users_data[user_id]['mine_count'] += 10000
        bot.answer_callback_query(call.id, "üéâ –í—ã –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ—Ä–æ–±–∫—É! +10,000 —Ä—É–¥—ã üíé")
    else:
        users_data[user_id]['mine_count'] -= 1000
        bot.answer_callback_query(call.id, "üòû –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞! -1,000 —Ä—É–¥—ã üíé")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä—É–¥—ã
    mine_count = users_data[user_id]['mine_count']
    bot.send_message(call.message.chat.id, f"‚ôªÔ∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä—É–¥—ã: {mine_count}")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –†–ü –ö–û–ú–ê–ù–î–´ 
@bot.message_handler(func=lambda message: message.text == '–†–ü –∫–æ–º–∞–Ω–¥—ã')
def rp_commands_info(message):
    bot.send_message(message.chat.id, "‚ùì–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –µ—Å—Ç—å –†–ü –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µüëá\nhttps://telegra.ph/Kak-ispolzovat-RP-komandy-08-06")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –†–ü –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
rp_commands = {
    "–û–±–Ω—è—Ç—å": "ü§ó –í—ã –æ–±–Ω—è–ª–∏ {username}!",
    "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "üíã –í—ã –ø–æ—Ü–µ–ª–æ–≤–∞–ª–∏ {username}!",
    "–ü–æ–∂–∞—Ç—å —Ä—É–∫—É": "ü§ù –í—ã –ø–æ–∂–∞–ª–∏ —Ä—É–∫—É {username}!",
    "–ü–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π": "üò° –í—ã –ø–æ—Å–ª–∞–ª–∏ {username} –Ω–∞ —Ö—É–π!",
    "–¢—Ä–∞—Ö–Ω—É—Ç—å": "üî• –í—ã —Ç—Ä–∞—Ö–Ω—É–ª–∏ {username}!",
    "–£–±–∏—Ç—å": "üî™ –í—ã —É–±–∏–ª–∏ {username}!",
    "–£–¥–∞—Ä–∏—Ç—å": "üëä –í—ã —É–¥–∞—Ä–∏–ª–∏ {username}!",
    "–ü–∏—Ç—å —á–∞–π": "üçµ –í—ã –ø—å–µ—Ç–µ —á–∞–π —Å {username}!",
    "–ü–∏—Ç—å –∫–æ—Ñ–µ": "‚òï –í—ã –ø—å–µ—Ç–µ –∫–æ—Ñ–µ —Å {username}!",
    "–†–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å": "üí• –í—ã —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª–∏ {username}!"
}

@bot.message_handler(func=lambda message: any(word in message.text for word in rp_commands.keys()))
def rp_command_response(message):
    user_id = message.from_user.id
    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return
    
    command = next(word for word in rp_commands.keys() if word in message.text)
    username = message.text.split()[-1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    if username.startswith("@"):
        response = rp_commands[command].format(username=username)
    else:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)."
    
    bot.send_message(message.chat.id, response)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∏–±–µ—Ä –∫–æ–º–∞–Ω–¥ü•∑
# –î–∞–Ω–Ω—ã–µ —Ç–∞–π–º –¥–æ–∫—Å–∞
last_dox_time = {}

@bot.message_handler(func=lambda message: message.text.lower().startswith('–∑–∞–¥–æ–∫—Å–∏—Ç—å'))
def dox_user(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–∞—Ö—Ç–∞
    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "–¥–æ–∫—Å–∞"
    if user_id in last_dox_time and current_time - last_dox_time[user_id] < 300:
        remaining_time = int(300 - (current_time - last_dox_time[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–∫—Å–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        target_username = message.text.split()[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º username
    except IndexError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username. –ü—Ä–∏–º–µ—Ä: –∑–∞–¥–æ–∫—Å–∏—Ç—å @suren41k2009")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –æ—Ç 500 –¥–æ 2000 —Ä—É–¥—ã
    reward = random.randint(500, 2000)
    users_data[user_id]['mine_count'] += reward

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π "–æ–ø–µ—Ä–∞—Ü–∏–∏"
    bot.send_message(message.chat.id, f"üòà –í—ã –∑–∞–¥–æ–∫—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward} —Ä—É–¥—ã –∑–∞ —Å–ª–∏—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "–¥–æ–∫—Å–∞"
    last_dox_time[user_id] = current_time

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, f"ü•∑ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä—É–¥—ã {users_data[user_id]['mine_count']} ")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—á–∏–µ üß©
@bot.message_handler(func=lambda message: message.text == '–ö–æ–º–∞–Ω–¥—ã')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üß©–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ VRT, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –¢–∞–º —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüëá\nhttps://telegra.ph/INSTRUKCIYA-PO-ISPOLZOVANIYU---VRT-08-12"
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞üéÅüíé
last_prize_time = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞

@bot.message_handler(func=lambda message: message.text.lower() == '–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑')
def daily_prize(message):
    user_id = message.from_user.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    if user_id in last_prize_time and current_time - last_prize_time[user_id] < 86400:
        bot.send_message(message.chat.id, "‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–¥—ã –æ—Ç 1,000 –¥–æ 5,000
    prize = random.randint(1000, 5000)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é mine_count
    if user_id in users_data:
        users_data[user_id]['mine_count'] += prize
    else:
        users_data[user_id] = {'username': message.from_user.username, 'mine_count': prize, 'items': [], 'rank': None}

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
    last_prize_time[user_id] = current_time

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, f"üéâ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ –∏ –ø–æ–ª—É—á–∏–ª–∏ {prize} —Ä—É–¥—ã! üéÅ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–∑ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫—Å–∏ üöï

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(func=lambda message: message.text.lower() == '—Ç–∞–∫—Å–∏')
def taxi_handler(message):
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_for_destination'
    
    bot.send_message(message.chat.id, "üöï –í—ã –≤—ã–∑–≤–∞–ª–∏ —Ç–∞–∫—Å–∏. –ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏
@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == 'waiting_for_destination')
def destination_handler(message):
    user_id = message.from_user.id
    destination = message.text

    # –°–ø–∏—Å—ã–≤–∞–µ–º 100 —Ä—É–±
    if user_id in users_data:
        users_data[user_id]['mine_count'] -= 100
    else:
        users_data[user_id] = {'username': message.from_user.username, 'mine_count': -100, 'items': [], 'rank': None}

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[user_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏
    bot.send_message(message.chat.id, f"üèÅ –í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ –≤ \"{destination}\". –° –≤–∞—Å —Å–Ω—è–ª–∏ 100 —Ä—É–¥—ã –∑–∞ –ø—Ä–æ–µ–∑–¥. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–∫—Å–∏! üöñ")

# –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞ —Ç–æ–∫–µ–Ω ü™ô
@bot.message_handler(func=lambda message: message.text.lower() == '—Ç–æ–∫–µ–Ω')
def token_info(message):
    bot.send_message(
        message.chat.id, 
        "ü™ô –¢–æ–∫–µ–Ω VRT, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å.\n\n"
        "üòî –ù–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º telegram-–∫–∞–Ω–∞–ª–µ - @VRT_dev.\n\n"
        "ü´Ç –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫ü•∑"
@bot.message_handler(func=lambda message: message.text.lower() == '–æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫')
def rob_bank(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if user_id not in users_data:
        users_data[user_id] = {
            'username': message.from_user.username,
            'mine_count': 0,
            'items': [],
            'rank': None,
            'last_robbery_time': 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
        }

    current_time = time.time()
    last_robbery_time = users_data[user_id].get('last_robbery_time', 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
    if current_time - last_robbery_time < 86400:
        remaining_time = int(86400 - (current_time - last_robbery_time))
        hours = remaining_time // 3600
        minutes = (remaining_time % 3600) // 60
        bot.send_message(message.chat.id, f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ –±–∞–Ω–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç.")
        return

    # 50/50 —à–∞–Ω—Å –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
    if random.choice([True, False]):
        # –£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ: —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–¥—ã –æ—Ç 5000 –¥–æ 10000
        reward = random.randint(5000, 10000)
        users_data[user_id]['mine_count'] += reward
        bot.send_message(message.chat.id, f"üí∞ –í—ã –æ–≥—Ä–∞–±–∏–ª–∏ –±–∞–Ω–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward} —Ä—É–¥—ã! –£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üéâ")
    else:
        # –ù–µ—É–¥–∞—á–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ: —à—Ç—Ä–∞—Ñ 1000 —Ä—É–¥—ã
        fine = 1000
        users_data[user_id]['mine_count'] -= fine
        bot.send_message(message.chat.id, f"üöî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫, –∏ –≤–∞—Å –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–ª–∏ –Ω–∞ {fine} —Ä—É–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üò¢")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[user_id]['last_robbery_time'] = current_time

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (promoüéÅ)
promo_codes = {
    'PRM123': 50000,
    'GFT456': 50000,
    'BNS789': 50000,
    'RWD012': 50000,
    'WIN345': 50000,
    'LCK678': 50000,
    'TRY901': 50000,
    'FUN234': 50000,
    'JOY567': 50000,
    'GLD890': 50000
}

used_promo_codes = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–º–æ–∫–æ–¥—ã')
def ask_for_promo_code(message):
    user_id = message.from_user.id
    if user_id in users_data:
        bot.send_message(message.chat.id, "üéÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
        bot.register_next_step_handler(message, process_promo_code)
    else:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")

def process_promo_code(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type != 'text':
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        bot.register_next_step_handler(message, process_promo_code)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        return

    promo_code = message.text.strip().upper()

    if promo_code in promo_codes:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        if user_id in used_promo_codes and promo_code in used_promo_codes[user_id]:
            bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        else:
            users_data[user_id]['mine_count'] += promo_codes[promo_code]
            # –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if user_id not in used_promo_codes:
                used_promo_codes[user_id] = []
            used_promo_codes[user_id].append(promo_code)
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {promo_codes[promo_code]} —Ä—É–¥—ã. üíé")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        bot.register_next_step_handler(message, process_promo_code)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥üìâüìà
@bot.message_handler(func=lambda message: message.text == '–¢—Ä–µ–π–¥')
def ask_for_trade_input(message):
    user_id = message.from_user.id
    if user_id in users_data:
        bot.send_message(message.chat.id, "üíπ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑) –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {—Å—É–º–º–∞} –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑")
        bot.register_next_step_handler(message, process_trade)
    else:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")

def process_trade(message):
    user_id = message.from_user.id
    try:
        trade_input = message.text.strip().split()
        trade_amount = int(trade_input[0])
        trade_direction = trade_input[1].lower()

        if trade_direction not in ['–≤–≤–µ—Ä—Ö', '–≤–Ω–∏–∑']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–≤–≤–µ—Ä—Ö' –∏–ª–∏ '–≤–Ω–∏–∑'.")
            return

        if trade_amount > users_data[user_id]['mine_count']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–¥—ã –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏.")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞
        outcome = random.choice(['–≤–≤–µ—Ä—Ö', '–≤–Ω–∏–∑'])
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç 1% –¥–æ 100%
        percentage_change = random.randint(1, 100)
        change_amount = trade_amount * percentage_change // 100

        if trade_direction == outcome:
            users_data[user_id]['mine_count'] += change_amount
            bot.send_message(message.chat.id, f"üéâ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ {trade_direction} –æ–∫–∞–∑–∞–ª–∞—Å—å –≤–µ—Ä–Ω–æ–π! –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {change_amount} —Ä—É–¥—ã ({percentage_change}%). üí∞\n‚ôªÔ∏è–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä—É–¥—ã: {users_data[user_id]['mine_count']}")
        else:
            users_data[user_id]['mine_count'] -= change_amount
            bot.send_message(message.chat.id, f"üòû –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ {trade_direction} –Ω–µ —Å—ã–≥—Ä–∞–ª–∞. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {change_amount} —Ä—É–¥—ã ({percentage_change}%). üí∏\n‚ôªÔ∏è–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä—É–¥—ã: {users_data[user_id]['mine_count']}")

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {—Å—É–º–º–∞} –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑")

user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
last_case_open_time = {}

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
last_work_time = {}

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç—ã
@bot.message_handler(func=lambda message: message.text.lower() == '—Ä–∞–±–æ—Ç–∞')
def start_work(message):
    user_id = message.from_user.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã
    if user_id in last_work_time and current_time - last_work_time[user_id] < 300:
        remaining_time = int(300 - (current_time - last_work_time[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º—É–º 200 —Ä—É–¥—ã
    if users_data[user_id]['mine_count'] < 200:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è 200 —Ä—É–¥—ã.")
        return

    # –û—Ç–Ω–∏–º–∞–µ–º 200 —Ä—É–¥—ã –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    users_data[user_id]['mine_count'] -= 200

    # –®–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö 70%
    if random.random() <= 0.7:
        # –£—Å–ø–µ—Ö: –∑–∞—Ä–∞–±–æ—Ç–∞–ª –æ—Ç 1000 –¥–æ 3000 —Ä—É–¥—ã
        earnings = random.randint(1000, 3000)
        users_data[user_id]['mine_count'] += earnings
        bot.send_message(message.chat.id, f"üí∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} —Ä—É–¥—ã!")
    else:
        # –ù–µ—É–¥–∞—á–∞: —Ç–µ—Ä—è–µ—Ç 200 —Ä—É–¥—ã
        bot.send_message(message.chat.id, "üòû –£–≤—ã, –≤—ã –ø—Ä–æ–≥–æ—Ä–µ–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 200 —Ä—É–¥—ã")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã
    last_work_time[user_id] = current_time

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä—É–¥—ã
    bot.send_message(message.chat.id, f"üíé –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä—É–¥—ã {users_data[user_id]['mine_count']}")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–µ–π—Å 2
@bot.message_handler(func=lambda message: message.text.lower() == '–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å 2')
def open_case_2(message):
    user_id = message.from_user.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —à–∞—Ö—Ç—É
    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    if user_id in last_case_open_time and current_time - last_case_open_time[user_id] < 300:
        time_left = int(300 - (current_time - last_case_open_time[user_id]))
        minutes_left = time_left // 60
        seconds_left = time_left % 60
        bot.send_message(message.chat.id, f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å 2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã –æ—Ç 500 –¥–æ 1,000 —Ä—É–±
    reward = random.randint(500, 1000)
    users_data[user_id]['mine_count'] += reward

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    last_case_open_time[user_id] = current_time

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å 2 –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward} —Ä—É–¥—ã! üíé\n‚ôªÔ∏è –í—Å–µ–≥–æ —Ä—É–¥—ã - {users_data[user_id]['mine_count']}")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —à–∏–ø–ø–µ—Ä–∏–ºüíû
@bot.message_handler(func=lambda message: message.text == '–®–∏–ø–ø–µ—Ä–∏–º')
def request_usernames(message):
    if message.chat.type in ['group', 'supergroup']:
        user_states[message.from_user.id] = {'state': 'waiting_for_usernames'}
        bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ 2 —é–∑–µ—Ä–Ω–µ–π–º–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏–ø–µ—Ä–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, @user1 @user2):")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'waiting_for_usernames')
def handle_usernames(message):
    if message.chat.type in ['group', 'supergroup']:
        text = message.text.strip()
        usernames = text.split()
        
        if len(usernames) == 2 and all(username.startswith('@') for username in usernames):
            user1, user2 = usernames
            bot.send_message(message.chat.id, f"üíû –®–∏–ø–ø–µ—Ä–∏–º: {user1} –∏ {user2} –∂–∏–≤–∏—Ç–µ –≤–º–µ—Å—Ç–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ –∏ –¥–æ–ª–≥–æ ‚ò∫Ô∏è")
        else:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, @user1 @user2).")
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[message.from_user.id] = {'state': 'none'}
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

# –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∏–≤–µ–Ω—Ç
NewYear = ('')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∏–≤–µ–Ω—Ç ‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è
@bot.message_handler(func=lambda message: message.text == '–ò–≤–µ–Ω—Ç')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "‚ùÑÔ∏è–ù–û–í–û–ì–û–î–ù–ò–ô –ò–í–ï–ù–¢‚ùÑÔ∏è\n\nüéÖ–≤ —ç—Ç—É –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –Ω–æ—á—å –ø—Ä–∏–¥—ë—Ç —Å–∞–Ω—Ç–∞!\n–µ—Å–ª–∏ —Ç—ã –≤—ë–ª —Å–µ–±—è —Ö–æ—Ä–æ—à–æ —Ç–æ –ø–æ–ª—É—á–∏—à—å —Ö–æ—Ä–æ—à–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∏–≤–µ–Ω—Ç!\n\nüéá—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ö–æ—Ç—è—Ç –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤—Å–µ—Ö —Å –Ω–æ–≤—ã–º –≥–æ–¥–æ–º!\n\nü™®–Ω–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∏–≤–µ–Ω—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–Ω–æ–≥–æ —Ä—É–¥—ã –∏ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –±—É–¥–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Å–Ω–µ–∂–∫–∏!\n\nüí¨–≤—Å–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç.–¥. –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µüëá\nhttp://telegra.ph/INSTRUKCIYA-PO-ISPOLZOVANIYU---VRT-08-12")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∫–∏ 
@bot.message_handler(func=lambda message: message.text == '–°–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∫–∏')
def open_case(message):
    user_id = message.from_user.id

    if user_id not in users_data:
        bot.send_message(message.chat.id, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    current_time = datetime.now()
    last_cas_time = users_data[user_id].get('last_cas_time')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    if last_cas_time and current_time - last_cas_time < timedelta(minutes=1):
        remaining_time = timedelta(minutes=5) - (current_time - last_cas_time)
        bot.send_message(message.chat.id, f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∫–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining_time.seconds} —Å–µ–∫—É–Ω–¥")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    users_data[user_id]['last_cas_time'] = current_time

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω–æ–π —Ä—É–¥—ã
    received_ore = random.randint(1000, 5000)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ 2 —Ä–∞–∑–∞
    users_data[user_id]['mine_count'] += received_ore
    mine_count = users_data[user_id]['mine_count']

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    bot.send_message(message.chat.id, "‚ùÑÔ∏è –í—ã —Å–æ–±—Ä–∞–ª–∏ —Å–Ω–µ–∂–∫–∏ –∏ –æ–±–º–µ–Ω—è–ª–∏ –∏—Ö –Ω–∞ —Ä—É–¥—É!\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ü—Ä–æ—Ñ–∏–ª—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ ‚ùÑÔ∏è
@bot.message_handler(func=lambda message: message.text == "‚ùÑÔ∏è")
def send_halloween_greeting(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–∞—Ö—Ç–∞
    if user_id not in users_data:
        bot.reply_to(message, "‚öíÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —à–∞—Ö—Ç—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞—Ö—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —à–∞—Ö—Ç–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚ùÑÔ∏è —Ä–∞–Ω–µ–µ
    if users_data[user_id].get('halloween_claimed', False):
        bot.reply_to(message, "‚ùÑÔ∏è –ü—Ä–∏–∑ –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!")
        return

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ mine_count –Ω–∞ 10.000 –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    users_data[user_id]['mine_count'] += 10000
    users_data[user_id]['halloween_claimed'] = True
    bot.reply_to(message, "üéÑ–° –ù–û–í–´–ú –ì–û–î–û–ú\n‚ùÑÔ∏è —Ç—ã –ø–æ–ª—É—á–∏–ª 10.000 —Ä—É–¥—ã")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º "–∫–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫ @username"
@bot.message_handler(func=lambda message: message.text and message.text.startswith("–ö–∏–Ω—É—Ç—å —Å–Ω–µ–∂–æ–∫ @"))
def hug_user(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_to_hug = message.text.split(" ")[2]
        
        # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, f"‚òÉÔ∏è {sender_username} –∫–∏–Ω—É–ª(–∞) —Å–Ω–µ–∂–æ–∫ –≤ {username_to_hug}")
    except IndexError:
        bot.reply_to(message, "–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º "–ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ @username"
@bot.message_handler(func=lambda message: message.text and message.text.startswith("–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ @"))
def hug_user(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_to_hug = message.text.split(" ")[2]
        
        # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, f"üéÅ {sender_username} –ø–æ–¥–∞—Ä–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫ {username_to_hug}")
    except IndexError:
        bot.reply_to(message, "–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º "—Å–∫–∏–Ω—É—Ç—å –≤ —Å—É–≥—Ä–æ–± @username"
@bot.message_handler(func=lambda message: message.text and message.text.startswith("–°–∫–∏–Ω—É—Ç—å –≤ —Å—É–≥—Ä–æ–± @"))
def hug_user(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_to_hug = message.text.split(" ")[3]
        
        # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, f"üßó {sender_username} —Å–∫–∏–Ω—É–ª(–∞) {username_to_hug} –≤ —Å—É–≥—Ä–æ–±")
    except IndexError:
        bot.reply_to(message, "–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ üçä
@bot.message_handler(func=lambda message: message.text == '–°—ä–µ—Å—Ç—å –º–∞–Ω–¥–∞—Ä–∏–Ω')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üçä –ë–†–û –°–û–ñ–´–†–ê–õ –ú–ê–ù–î–ê–†–ò–ù!")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–µ–≥ ‚ùÑÔ∏è
@bot.message_handler(func=lambda message: message.text == '–°–Ω–µ–≥')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üå®Ô∏è –∫–∞–∂–∏—Å—å —Å–Ω–µ–≥ –ø–æ—à—ë–ª...")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ë–ª–∫–∞üéÑ
@bot.message_handler(func=lambda message: message.text == '–Å–ª–∫–∞')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üéÑ—ë–ª–∫–∞ –≥–æ—Ä–∏—Ç!")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏ üéÅ
@bot.message_handler(func=lambda message: message.text == '–£–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üê≤ –ë–ª—è –ì—Ä–∏–Ω—á —Å–ø–∏–∑–¥–∏–ª –ø–æ–¥–∞—Ä–∫–∏ —É –¥–µ—Ç–µ–π...")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ üéá
@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üéá –§–µ–π–µ—Ä–≤–µ—Ä–∫–∏ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã!!!")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –Ω–æ–≤—ã–º –≥–æ–¥–æ–º 2Ô∏è‚É£0Ô∏è‚É£2Ô∏è‚É£5Ô∏è‚É£
@bot.message_handler(func=lambda message: message.text == '–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –Ω–≥')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "‚ÄºÔ∏è–ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞:\n3Ô∏è‚É£1Ô∏è‚É£ 1Ô∏è‚É£2Ô∏è‚É£ 2Ô∏è‚É£0Ô∏è‚É£2Ô∏è‚É£4Ô∏è‚É£")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–Ω–µ–≥–æ–≤–∏–∫–∞
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–Ω–µ–≥–æ–≤–∏–∫–∞')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "‚õÑ–í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–Ω–µ–≥–æ–≤–∏–∫–∞!")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ üéÖ 
@bot.message_handler(func=lambda message: message.text == '–°–∞–Ω—Ç–∞')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üéÖ–•–û-–•–û-–•–û —Ç—ã –≤—ë–ª —Å–µ–±—è —Ö–æ—Ä–æ—à–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É?")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–≥–ª—É
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–≥–ª—É')
def send_other_info(message):
    bot.send_message(
        message.chat.id, 
        "üêª‚Äç‚ùÑÔ∏è –í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∏–≥–ª—É –∏ –∂–∏–≤—ë—Ç–µ —Ç–∞–º —Ö–∞—Ö")

# —Ç–æ–ø —á–∞—Ç–æ–≤
chats = ['üî•–¢–û–ü –ß–ê–¢–´ –ì–î–ï –ï–°–¢–¨ BCS –ë–û–¢–´üî•\n\n1. @suren41kchatik\n2. @RPliveWorld\n3. @grifer_com']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ø–æ–≤
@bot.message_handler(func=lambda message: message.text.lower() in ['—Ç–æ–ø', '—Ç–æ–ø—ã', '—á–∞—Ç—ã', '—á–∞—Ç', '—Ç–æ–ø —á–∞—Ç—ã'])
def handle_greeting(message):
    response = random.choice(chats)
    bot.reply_to(message, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)